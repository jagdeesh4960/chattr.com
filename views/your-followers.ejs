<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Chattr - Followers</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/remixicon/fonts/remixicon.css" rel="stylesheet">

  <style>
       html::-webkit-scrollbar {
        width: 0px;
        background: transparent; /* Chrome/Safari */
      }
      html {
        scrollbar-width: none; /* Firefox */
        -ms-overflow-style: none; /* IE and Edge */
      }
  </style>

</head>
<body class="bg-black text-white font-sans">

  <!-- Navbar -->
  <nav class="bg-pink-600 p-4 flex justify-between items-center">
    <h1 class="text-lg md:text-xl font-bold">Chattr</h1>
    <a href="/home" class="bg-pink-600 text-white font-bold hover:text-gray-300">Home</a>
  </nav>

  <!-- Main Content -->
  <div class="flex flex-col md:flex-row h-[90vh]">

    <!-- Sidebar Followers and Suggestions -->
    <div class="w-full md:w-1/4 border-r border-pink-600 overflow-y-auto">
      <div class="p-4">
        <h2 class="text-base md:text-lg font-bold mb-4">Following</h2>
        <% followingUsers.forEach(function(follower) { %>
          <div onclick="openChat('<%= follower.username %>', '<%= follower.profileImage %>','<%=follower._id%>')
          " class="flex items-center p-2 hover:bg-pink-700 cursor-pointer rounded-md">
            <img src="<%= follower.profileImage %>" alt="Profile" class="w-8 h-8 rounded-full border-2 border-white mr-3">
            <p class="font-semibold text-sm md:text-base"><%= follower.username %></p>
           <h1 id="userId" class="hidden" value="<%=userId %>"><%= userId %></h1>
           
          </div>
        <% }); %>
      </div>

      
    </div>

    <!-- Chat Area -->
    <div id="chatArea" class="hidden w-full md:w-3/4 flex flex-col h-full bg-white text-black">

      <!-- Chat Header -->
      <div class="flex items-center justify-between p-4 bg-black text-white relative">
        <div class="flex items-center gap-3">
          <img id="chatUserImage" src="" alt="Profile" class="w-8 h-8 rounded-full border-2 border-white">
          <h2 id="chatUsername" class="font-bold text-base md:text-lg"></h2>
        </div>
        <div class="flex items-center gap-4">
          <button><i class="ri-phone-fill text-lg md:text-xl"></i></button>
          <button onclick="startVideoCall()"><i class="ri-video-chat-fill text-lg md:text-xl"></i></button>
          <form action="/remove-follower" method="post">
            <input  id="unfollowbtn"  value="" name="followerId" class="hidden" >
            </input> 
            <button  class="bg-pink-500 hover:bg-pink-600 text-white text-xs md:text-sm font-bold py-1 px-4 rounded-md transition duration-300">Unfollow</button>
          </form>
        </div>
        <!-- Close Chat Button -->
        <button onclick="closeChat()" class="absolute top-16 right-0 px-2 py-1 rounded-md  text-sm  text-white bg-green-400  hover:text-pink-600 ">
         close
        </button>
      </div>

      <!-- Chat Messages -->
      <div id="chatMessages" class="flex-1 overflow-y-auto p-4 space-y-2 bg-gray-100">
        <!-- Messages will appear here dynamically -->
      </div>

      <!-- Chat Input -->
      <div class="flex p-4 border-t border-pink-600">
        <input id="messageInput" type="text" placeholder="Type a message..." class="flex-1 p-2 rounded-l-md border-none focus:outline-none bg-gray-200 text-sm">
        <button onclick="sendMessage()" class="bg-pink-600 text-white px-4 rounded-r-md hover:bg-pink-700 text-sm">Send</button>
      </div>

    </div>

  </div>




<!-- Video Call UI -->
<div id="videoCallContainer" class="fixed inset-0 bg-black bg-opacity-80 flex-col md:flex-row z-50 hidden justify-center items-center p-4">
  <div class="w-full md:w-1/2 h-64 bg-gray-900 rounded-xl relative m-2">
    <video id="remoteVideo" autoplay playsinline class="w-full h-full rounded-xl"></video>
  </div>
  <div class="w-full md:w-1/2 h-64 bg-gray-700 rounded-xl relative m-2">
    <video id="localVideo" autoplay muted playsinline class="w-full h-full rounded-xl"></video>
  </div>

  <!-- Call Controls -->
  <div class="absolute bottom-6 flex justify-center space-x-6">
    <button id="muteButton" class="bg-pink-600 text-white p-3 rounded-full text-xl"><i class="ri-mic-off-line"></i></button>
    <button id="speakerButton" class="bg-pink-600 text-white p-3 rounded-full text-xl"><i class="ri-volume-up-line"></i></button>
    <button id="endCallButton" class="bg-red-800 text-white font-bold px-2 py-1 rounded-full text-sm">End</button>
  </div>
</div>


<!-- Incoming Call Notification -->

<div id="incomingCallPopup" class="hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-60 z-50">
  <div class="bg-white p-6 rounded-lg text-center text-black space-y-4">
    <p class="text-lg font-semibold" id="callerName">Incoming video call...</p>
    <div class="flex justify-center space-x-4">
      <button id="acceptCall" class="bg-green-500 hover:bg-green-600 px-4 py-2 rounded text-white">Accept</button>
      <button id="rejectCall" class="bg-red-500 hover:bg-red-600 px-4 py-2 rounded text-white">Reject</button>
    </div>
  </div>
</div>














  <!-- JS for handling chat -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>


  <script>
    let receiverId = '';
    let senderId = document.getElementById('userId').textContent.trim();
    const socket = io({ query: { userId: senderId } }); // initialize socket
  
    function openChat(username, profileImage, followerId) {
      receiverId = followerId;
      document.getElementById('unfollowbtn').value = followerId;
      document.getElementById('chatArea').classList.remove('hidden');
      document.getElementById('chatUsername').innerText = username;
      document.getElementById('chatUserImage').src = profileImage;
      document.getElementById('chatMessages').innerHTML = '';
  
      socket.emit('load-messages', { sender: senderId, receiver: receiverId });
    }
  
    socket.on('messages-history', (messages) => {
      const chatMessages = document.getElementById('chatMessages');
      messages.forEach((msg) => {
        const div = document.createElement('div');
        const isSender = msg.sender === senderId;
        div.className = isSender ? 'text-right' : 'text-left';
        div.innerHTML = `<span class="inline-block ${
          isSender ? 'bg-pink-600 text-white' : 'bg-gray-300 text-black'
        } px-4 py-2 rounded-full max-w-xs text-sm">${msg.text}</span>`;
        chatMessages.appendChild(div);
      });
      chatMessages.scrollTop = chatMessages.scrollHeight;
    });
  
    socket.on('chat-message', (data) => {
      if (data.sender === receiverId) {
        const div = document.createElement('div');
        div.className = 'text-left';
        div.innerHTML = `<span class="inline-block bg-gray-300 text-black px-4 py-2 rounded-full max-w-xs text-sm">${data.text}</span>`;
        document.getElementById('chatMessages').appendChild(div);
      }
    });
  
    function sendMessage() {
      const input = document.getElementById('messageInput');
      const messageText = input.value.trim();
      if (!messageText) return;
  
      const messageDiv = document.createElement('div');
      messageDiv.className = "text-right";
      messageDiv.innerHTML = `<span class="inline-block bg-pink-600 text-white px-4 py-2 rounded-full max-w-xs text-sm">${messageText}</span>`;
      document.getElementById('chatMessages').appendChild(messageDiv);
  
      socket.emit("chat-message", {
        sender: senderId,
        receiver: receiverId,
        text: messageText
      });
  
      input.value = '';
      document.getElementById('chatMessages').scrollTop = document.getElementById('chatMessages').scrollHeight;
    }
  
    function closeChat() {
      document.getElementById('chatArea').classList.add('hidden');
    }
  </script>


<script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>

<script>
  let localStream;
  let peerConnection;
  const videoCallContainer = document.getElementById("videoCallContainer");
  const localVideo = document.getElementById("localVideo");
  const remoteVideo = document.getElementById("remoteVideo");

  const servers = {
    iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
  };

  function startVideoCall() {
    socket.emit('call-user', {
      to: receiverId,
      from: senderId,
      name: document.getElementById('chatUsername').innerText
    });
  }

  socket.on('call-made', async ({ from, name }) => {
    const accept = confirm(`${name} is calling you. Accept?`);
    if (accept) {
      receiverId = from;
      socket.emit('accept-call', { to: from, from: senderId });
      await startCall(true); // receiver
    } else {
      socket.emit('reject-call', { to: from });
    }
  });

  socket.on('call-accepted', async ({ from }) => {
    await startCall(false); // caller
  });

  socket.on('call-rejected', () => {
    alert("Call rejected");
  });

  async function startCall(isReceiver) {
    videoCallContainer.classList.remove('hidden');
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    localVideo.srcObject = localStream;

    peerConnection = new RTCPeerConnection(servers);

    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
    });

    peerConnection.ontrack = event => {
      remoteVideo.srcObject = event.streams[0];
    };

    peerConnection.onicecandidate = event => {
      if (event.candidate) {
        socket.emit('video-ice-candidate', { candidate: event.candidate, to: receiverId });
      }
    };

    if (!isReceiver && senderId < receiverId) {
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.emit('video-offer', { offer, to: receiverId });
    }
  }

  socket.on('video-offer', async ({ offer, from }) => {
    receiverId = from;
    if (!localStream) {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      localVideo.srcObject = localStream;
    }

    peerConnection = new RTCPeerConnection(servers);
    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
    });

    peerConnection.ontrack = event => {
      remoteVideo.srcObject = event.streams[0];
    };

    peerConnection.onicecandidate = event => {
      if (event.candidate) {
        socket.emit('video-ice-candidate', { candidate: event.candidate, to: from });
      }
    };

    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    socket.emit('video-answer', { answer, to: from });
  });

  socket.on('video-answer', async ({ answer }) => {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
  });

  socket.on('video-ice-candidate', async ({ candidate }) => {
    try {
      await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    } catch (err) {
      console.error('Error adding ICE candidate', err);
    }
  });

  function cleanupCall() {
    if (peerConnection) {
      peerConnection.close();
      peerConnection = null;
    }
    if (localStream) {
      localStream.getTracks().forEach(track => track.stop());
      localStream = null;
    }
    remoteVideo.srcObject = null;
    localVideo.srcObject = null;
    videoCallContainer.classList.add('hidden');
  }

  document.getElementById('endCallButton').onclick = () => {
    cleanupCall();
    socket.emit('end-call', { to: receiverId });
  };

  socket.on('end-call', () => {
    cleanupCall();
    alert("Call ended by other user.");
  });

  document.getElementById('muteButton').onclick = () => {
    const audioTrack = localStream?.getAudioTracks()[0];
    if (audioTrack) audioTrack.enabled = !audioTrack.enabled;
  };

  document.getElementById('speakerButton').onclick = () => {
    remoteVideo.muted = !remoteVideo.muted;
  };
</script>

  
</body>
</html>
